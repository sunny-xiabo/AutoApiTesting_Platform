{"name": "test_clt_add_EmissionSourceProject[校验正常增加关联项目]", "status": "broken", "statusDetails": {"message": "ValueError: JsonPath值获取失败None", "trace": "self = <test_clt_add_EmissionSourceProject.TestCltAddEmissionsourceproject object at 0x7fdc41a09ad0>\nin_data = {'assert': {'Code': {'AssertType': None, 'jsonpath': None, 'type': None, 'value': None}}, 'current_request_set_cache': None, 'data': {'id': None, 'projectList': [{'floorIdList': [1, 2, 3], 'projectId': 186}]}, 'dependence_case': True, ...}\ncase_skip = None\n\n    @allure.story(\"增加关联项目接口\")\n    @pytest.mark.parametrize('in_data', eval(re_data), ids=[i['detail'] for i in TestData])\n    def test_clt_add_EmissionSourceProject(self, in_data, case_skip):\n        \"\"\"\n        :param :\n        :return:\n        \"\"\"\n        res = RequestControl().http_request(in_data)\n        TearDownHandler().teardown_handle(res)\n        Assert(in_data['assert']).assert_equality(response_data=res['response_data'],\n>                                                 sql_data=res['sql_data'], status_code=res['status_code'])\n\ntest_cases/CLTEmissionScource/test_clt_add_EmissionSourceProject.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.assertUtils.assertControl.Assert object at 0x7fdc40f9c990>\nresponse_data = '{\"success\":false,\"message\":\"请求的数据格式不符!\",\"code\":\"400\",\"result\":\"JSON parse error: Unrecognized token \\'projectList\\': ...'null\\', \\'true\\' or \\'false\\')\\\\n at [Source: (PushbackInputStream); line: 1, column: 13]\",\"timestamp\":1658839656245}'\nsql_data = {'sql': None}, status_code = 400\n\n    def assert_equality(self,\n                        response_data: Text,\n                        sql_data: Dict,\n                        status_code: int):\n        \"\"\" assert 断言处理\"\"\"\n        # 判断数据类型\n        if self._check_params(response_data, sql_data) is not False:\n            for key, values in self.assert_data.items():\n                if key == \"status_code\":\n                    assert status_code == values\n                else:\n                    assert_value = self.assert_data[key]['value']  # 获取 yaml 文件中的期望value值\n                    assert_jsonpath = self.assert_data[key]['jsonpath']  # 获取到 yaml断言中的jsonpath的数据\n                    assert_types = self.assert_data[key]['AssertType']\n                    # 从yaml获取jsonpath，拿到对象的接口响应数据\n                    resp_data = jsonpath(json.loads(response_data), assert_jsonpath)\n    \n                    # jsonpath 如果数据获取失败，会返回False，判断获取成功才会执行如下代码\n                    if resp_data is not False:\n                        # 判断断言类型\n                        self.assert_type_handle(assert_types=assert_types,\n                                                sql_data=sql_data,\n                                                assert_value=assert_value,\n                                                key=key,\n                                                values=values,\n                                                resp_data=resp_data)\n                    else:\n                        ERROR.logger.error(\"JsonPath值获取失败{}\".format(assert_jsonpath))\n>                       raise ValueError(f\"JsonPath值获取失败{assert_jsonpath}\")\nE                       ValueError: JsonPath值获取失败None\n\nutils/assertUtils/assertControl.py:136: ValueError"}, "description": "\n        :param :\n        :return:\n        ", "steps": [{"name": "请求方式: POST", "status": "passed", "start": 1658839655982, "stop": 1658839655982}, {"name": "请求头: ", "status": "passed", "attachments": [{"name": "请求头: ", "source": "f42e7b4c-5c1e-4f03-bce4-fb5e1d9ef4dd-attachment.json", "type": "application/json"}], "start": 1658839655982, "stop": 1658839655982}, {"name": "请求数据: ", "status": "passed", "attachments": [{"name": "请求数据: ", "source": "d43ea0a8-cbd8-4422-9918-8d3daab9ce16-attachment.json", "type": "application/json"}], "start": 1658839655982, "stop": 1658839655982}, {"name": "预期数据: ", "status": "passed", "attachments": [{"name": "预期数据: ", "source": "3312e535-5dce-418a-8334-a29c1e9a59db-attachment.json", "type": "application/json"}], "start": 1658839655983, "stop": 1658839655983}, {"name": "响应耗时(ms): 111.29", "status": "passed", "start": 1658839655983, "stop": 1658839655983}], "attachments": [{"name": "log", "source": "daad21e2-f3b3-43f8-a772-e4a6878f97c8-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "in_data", "value": "{'method': 'POST', 'is_run': None, 'url': 'http://10.5.1.18:31212/api/carbon-lens-enterprise/emission_source/project/', 'detail': '校验正常增加关联项目', 'headers': {'Content-Type': 'application/json;', 'Authorization': '$cache{work_login_token}'}, 'requestType': 'JSON', 'data': {'id': None, 'projectList': [{'projectId': 186, 'floorIdList': [1, 2, 3]}]}, 'dependence_case': True, 'dependence_case_data': [{'case_id': 'self', 'dependent_data': [{'dependent_type': 'sqlData', 'jsonpath': '$.project_id', 'replace_key': '$.data.id'}, {'dependent_type': 'sqlData', 'jsonpath': '$.id', 'replace_key': '$.data.projectList'}]}], 'current_request_set_cache': None, 'sql': None, 'assert': {'Code': {'jsonpath': None, 'type': None, 'value': None, 'AssertType': None}}, 'setup_sql': None, 'teardown': None, 'teardown_sql': None, 'sleep': None, 'response_cache': None}"}], "start": 1658839655869, "stop": 1658839655983, "uuid": "67ea7e7b-d17a-46b9-a8d0-57b229a2878c", "historyId": "c609c6f553272e7971d50c7cc5eca27e", "testCaseId": "dae56bc5176ae9390d987dca8f924d1e", "fullName": "test_cases.CLTEmissionScource.test_clt_add_EmissionSourceProject.TestCltAddEmissionsourceproject#test_clt_add_EmissionSourceProject", "labels": [{"name": "story", "value": "增加关联项目接口"}, {"name": "feature", "value": "排放源管理模块"}, {"name": "epic", "value": "Carbon Lens TEC"}, {"name": "parentSuite", "value": "test_cases.CLTEmissionScource"}, {"name": "suite", "value": "test_clt_add_EmissionSourceProject"}, {"name": "subSuite", "value": "TestCltAddEmissionsourceproject"}, {"name": "host", "value": "xiabodeMacBook-Air.local"}, {"name": "thread", "value": "60180-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.CLTEmissionScource.test_clt_add_EmissionSourceProject"}]}